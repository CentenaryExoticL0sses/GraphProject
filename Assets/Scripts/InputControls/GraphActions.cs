//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputControls/GraphActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GraphActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GraphActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GraphActions"",
    ""maps"": [
        {
            ""name"": ""Tool"",
            ""id"": ""a05c0400-9c36-46d5-a0a3-f24d07175e50"",
            ""actions"": [
                {
                    ""name"": ""MouseAction"",
                    ""type"": ""Button"",
                    ""id"": ""535d6709-c328-4f81-854a-9df385c3a358"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""ae348bbd-52ae-48ef-b0f0-f0f4c0d48a2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d95187a-2ccb-4592-8c2b-2b712307a948"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a2eae27-8e28-4d70-a86e-545723e503ab"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tool
        m_Tool = asset.FindActionMap("Tool", throwIfNotFound: true);
        m_Tool_MouseAction = m_Tool.FindAction("MouseAction", throwIfNotFound: true);
        m_Tool_Cancel = m_Tool.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tool
    private readonly InputActionMap m_Tool;
    private List<IToolActions> m_ToolActionsCallbackInterfaces = new List<IToolActions>();
    private readonly InputAction m_Tool_MouseAction;
    private readonly InputAction m_Tool_Cancel;
    public struct ToolActions
    {
        private @GraphActions m_Wrapper;
        public ToolActions(@GraphActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseAction => m_Wrapper.m_Tool_MouseAction;
        public InputAction @Cancel => m_Wrapper.m_Tool_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_Tool; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToolActions set) { return set.Get(); }
        public void AddCallbacks(IToolActions instance)
        {
            if (instance == null || m_Wrapper.m_ToolActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToolActionsCallbackInterfaces.Add(instance);
            @MouseAction.started += instance.OnMouseAction;
            @MouseAction.performed += instance.OnMouseAction;
            @MouseAction.canceled += instance.OnMouseAction;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IToolActions instance)
        {
            @MouseAction.started -= instance.OnMouseAction;
            @MouseAction.performed -= instance.OnMouseAction;
            @MouseAction.canceled -= instance.OnMouseAction;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IToolActions instance)
        {
            if (m_Wrapper.m_ToolActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToolActions instance)
        {
            foreach (var item in m_Wrapper.m_ToolActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToolActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToolActions @Tool => new ToolActions(this);
    public interface IToolActions
    {
        void OnMouseAction(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
